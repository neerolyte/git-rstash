#!/bin/bash -e

main() {
	parse_cli "$@"
	populate_config

	if $debug; then set -x; fi
	run_command
}

usage() {
	echo "Usage: git rstash list"
	echo "   or: git rstash show"
	echo "   or: git rstash save [<message>]"
	echo "   or: git rstash ( pop | apply )"
	echo "   or: git rstash clear"
	echo "   or: git rstash sync"
	echo "   or: git rstash list-stores"
	exit 1
}

run_command() {
	[[ "$(type -t "command_$verb")" == "function" ]] || usage
	"command_$verb"
}

parse_cli() {
	parse_verb "$@" && shift

	while true; do
		[[ "${#@}" -gt 0 ]] || break
		case "$1" in 
			--debug)
				debug=true
				;;
			--quiet|-q)
				quiet=true
				;;
			--*)
				usage
				;;
			*)
				break
				;;
		esac

		shift
	done

	trailing="$*"
}

populate_config() { 
	# try git config for storage directory
	rstash_dir="$(git config --get rstash.dir || true)"
	# fail back to home directory
	rstash_dir="${rstash_dir:-$HOME/.git-rstash}"

	name="$trailing"
	debug=${debug:-false}
	quiet="${quiet:-false}"
	if $quiet; then
		quiet_arg=--quiet
	else
		quiet_arg=''
	fi
}

get_message() {
	echo "${trailing:-$(current_commit_info)}"
}

parse_verb() {
	[[ "${#@}" -gt 0 ]] || usage
	verb="$1"
}

error() {
	echo "ERROR: $*"
	exit 1
}

command_save() {
	prep_store
	# TODO: test for --binary
	git diff --binary > "$(command_get-store-dir)/stashes/rstash@{$(generate_id)}: WIP on $(current_branch): $(get_message)"
	git reset $quiet_arg --hard
}

command_list() {
	prep_store
	ls -1 -- "$(command_get-store-dir)/stashes"
}

command_apply() {
	find_rstash_file
	git apply < "$rstash_file"
	if ! $quiet; then
		git status
	fi
}

command_pop() {
	command_apply
	rm -f -- "$rstash_file"
}

command_cat() {
	find_rstash_file
	cat "$rstash_file"
}

command_clear() {
	rm -f -- "$(command_get-store-dir)/stashes/"*
}

command_sync() {
	cmd="$(git config --get rstash.sync.cmd 2>/dev/null || true)"
	if [[ -z "$cmd" ]]; then
		error 'Can not sync without a sync command (hint: git config --global rstash.sync.cmd "unison -batch -ui text $HOME/.git-rstash ssh://<your server>/.git-rstash")'
	fi
	$cmd
}

command_list-stores() {
	(
	cd "$rstash_dir"
	for store in *; do
		if [[ -f "$store/metadata" ]]; then
			repo_location="$( . "$store/metadata"; echo "$repo_location"; )"
			echo "$store: $repo_location"
		fi
	done
	)
}

# Internal APIs that are exposed somewhat silently
command_get-dir() {
	echo "$rstash_dir"
}
command_get-current-stash() {
	find_rstash_file
	echo "$rstash_file"
}
command_get-store-dir() {
	echo "$rstash_dir/$(command_get-store)"
}
# what is the ID of the current store in use
# will just be the hash, not the full path to it
command_get-store() {
	# try to echo out store from git config
	if ! git config --get rstash.store 2> /dev/null; then
		# otherwise default to one based on our current top level
		current_top_level | sha256sum | cut -f1 -d' '
	fi
}

find_rstash_file() {
	files=("$(command_get-store-dir)/stashes/"*"$trailing"*)
	if [[ "${#files[@]}" -gt 1 ]] && ! [[ -z "$trailing" ]]; then
		error "'$trailing' was ambiguous (hint: 'git rstash list')"
	elif [[ "${#files[@]}" == 0 ]]; then
		error "'$trailing' matched no rstashes (hint: 'git rstash list')"
	fi
	# grab the last matching one
	offset=$((${#files[@]} - 1))
	rstash_file="${files[$offset]}"
}

prep_store() {
	store="$(command_get-store-dir)"
	if ! [[ -d "$store/stashes" ]]; then
		mkdir -p -- "$store/stashes"
		echo "repo_location=$(current_top_level)" > "$store/metadata"
	fi
}

current_commit_info() {
	git show --oneline --name-only | head -1
}

current_branch() {
	git branch | awk '$1 == "*" { print $2 }'
}

current_top_level() {
	git rev-parse --show-toplevel
}

generate_id() {
	date -Ins
}

main "$@"
